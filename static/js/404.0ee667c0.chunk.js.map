{"version":3,"file":"static/js/404.0ee667c0.chunk.js","mappings":"8MACA,GAAiB,E,SCkBjB,EAda,SAAC,GAAkB,IAAhBA,EAAe,EAAfA,GAAIC,EAAW,EAAXA,KACZC,GAAWC,EAAAA,EAAAA,MAGjB,OACE,iBAAKC,UAAWC,EAAAA,QAAhB,WACE,cAAGD,UAAWC,EAAAA,KAAd,SAAyBJ,KACzB,mBAAQG,UAAWC,EAAAA,IAASC,KAAK,SAASC,QALzB,kBAAML,GAASM,EAAAA,EAAAA,IAAWR,GAA1B,EAKjB,sBAKL,ECjBYS,EAAgB,SAAAC,GAAK,OAAIA,EAAMC,MAAMC,OAAhB,EAIrBC,EAAiB,SAAAH,GAAK,OAAIA,EAAMC,MAAMG,KAAhB,ECHnC,GAAiB,ECmBjB,EAdiB,WACf,IAAMH,GAAQI,EAAAA,EAAAA,IAAYF,GAE1B,OACE,eAAIT,UAAWC,EAAAA,KAAf,SACGM,EAAMK,KAAI,gBAAGhB,EAAH,EAAGA,GAAIC,EAAP,EAAOA,KAAP,OACT,yBACE,SAAC,EAAD,CAAMD,GAAIA,EAAIC,KAAMA,KADbD,EADA,KAOhB,ECjBD,GAAiB,EC8BjB,EAzBmB,WACjB,IAAME,GAAWC,EAAAA,EAAAA,MAcjB,OACE,kBAAMC,UAAWC,EAAAA,KAAUY,SAbR,SAAAC,GACnBA,EAAEC,iBACF,IAAMC,EAAOF,EAAEG,cACTpB,EAAOmB,EAAKE,SAASrB,KAAKsB,MAChC,GAAa,KAATtB,EAGF,OAFAC,GAASsB,EAAAA,EAAAA,IAAQvB,SACjBmB,EAAKK,QAGPC,MAAM,yCACP,EAGC,WACE,kBAAOC,KAAK,OAAOvB,UAAWC,EAAAA,SAC9B,mBAAQC,KAAK,SAASF,UAAWC,EAAAA,OAAjC,wBAKL,ECpBc,SAASuB,IACpB,IAAM1B,GAAWC,EAAAA,EAAAA,MACX0B,GAAYd,EAAAA,EAAAA,IAAYN,GAc9B,OAJAqB,EAAAA,EAAAA,YAAU,WACN5B,GAAS6B,EAAAA,EAAAA,MACZ,GAAE,CAAC7B,KAGA,iCACI,SAAC8B,EAAA,EAAD,WACI,6CAEJ,SAAC,EAAD,KACA,yBAAMH,GAAa,4BACnB,SAAC,EAAD,MAGX,C","sources":["components/Task/Task.module.css","components/Task/Task.jsx","redux/tasks/selectors.js","components/TaskList/TaskList.module.css","components/TaskList/TaskList.jsx","components/TaskEditor/TaskEditor.module.css","components/TaskEditor/TaskEditor.jsx","pages/Tasks.js"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {};","import { useDispatch } from 'react-redux';\nimport { deleteTask } from 'redux/tasks/operations';\n\nimport css from './Task.module.css';\n\nconst Task = ({ id, text }) => {\n  const dispatch = useDispatch();\n  const handleDelete = () => dispatch(deleteTask(id));\n\n  return (\n    <div className={css.wrapper}>\n      <p className={css.text}>{text}</p>\n      <button className={css.btn} type=\"button\" onClick={handleDelete}>\n        Delete\n      </button>\n    </div>\n  );\n};\n\nexport default Task;\n","export const selectLoading = state => state.tasks.loading;\n\nexport const selectFilter = state => state.tasks.filter;\n\nexport const selectAllTasks = state => state.tasks.items;","// extracted by mini-css-extract-plugin\nexport default {};","import { useSelector } from 'react-redux';\nimport Task from 'components/Task/Task';\nimport { selectAllTasks } from 'redux/tasks/selectors';\n\nimport css from './TaskList.module.css';\n\nconst TaskList = () => {\n  const tasks = useSelector(selectAllTasks);\n\n  return (\n    <ul className={css.list}>\n      {tasks.map(({ id, text }) => (\n        <li key={id}>\n          <Task id={id} text={text} />\n        </li>\n      ))}\n    </ul>\n  );\n};\n\nexport default TaskList;\n","// extracted by mini-css-extract-plugin\nexport default {};","import { useDispatch } from 'react-redux';\nimport { addTask } from 'redux/tasks/operations';\n\nimport css from './TaskEditor.module.css';\n\n// редактирование\nconst TaskEditor = () => {\n  const dispatch = useDispatch();\n\n  const handleSubmit = e => {\n    e.preventDefault();\n    const form = e.currentTarget;\n    const text = form.elements.text.value;\n    if (text !== '') {\n      dispatch(addTask(text));\n      form.reset();\n      return;\n    }\n    alert('Task cannot be empty. Enter some text!');\n  };\n\n  return (\n    <form className={css.form} onSubmit={handleSubmit}>\n      <input name=\"text\" className={css.input} />\n      <button type=\"submit\" className={css.button}>\n        Add task\n      </button>\n    </form>\n  );\n};\n\nexport default TaskEditor;\n","import { useEffect } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { Helmet } from \"react-helmet\";\n\nimport TaskList from \"components/TaskList/TaskList\";\nimport TaskEditor from \"components/TaskEditor/TaskEditor\";\nimport { fetchTasks } from \"redux/tasks/operations\";\nimport { selectLoading } from \"redux/tasks/selectors\";\n\nexport default function Tasks() {\n    const dispatch = useDispatch();\n    const isLoading = useSelector(selectLoading);\n\n    /* useEffect - використовується для встановлення ефектів, які відбуваються пілся рендерингу компонента.\n    Тобто fetchTasks() відбудиться після того, як компонент з'явився на екрані.\n    [dispatch] - масив залежностей. Це вказує, що useEffect повинен виконатися \n    лише у тому випадку, якщо значення залежностей змінилося. Тобто, якщо значення \n    dispatch буде змінюватися, то useEffect буде виконано знову */\n    /* Цей код виконує завантаження завдань за допомогою функціїї fetchTasks() після того,\n    як компонент був відображений, і відслідковує зміни dispatch, щоб визначити, \n    чи потрібно виконувати ефект знову */\n    useEffect(() => {\n        dispatch(fetchTasks());\n    }, [dispatch]);\n\n    return (\n        <>\n            <Helmet>\n                <title>Your tasks</title>\n            </Helmet>\n            <TaskEditor />\n            <div>{isLoading && 'Request in progress...'}</div>\n            <TaskList />\n        </>\n    )\n}"],"names":["id","text","dispatch","useDispatch","className","css","type","onClick","deleteTask","selectLoading","state","tasks","loading","selectAllTasks","items","useSelector","map","onSubmit","e","preventDefault","form","currentTarget","elements","value","addTask","reset","alert","name","Tasks","isLoading","useEffect","fetchTasks","Helmet"],"sourceRoot":""}